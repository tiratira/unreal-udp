// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from command.proto</summary>
public static partial class CommandReflection {

  #region Descriptor
  /// <summary>File descriptor for command.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CommandReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1jb21tYW5kLnByb3RvIr4BCghSb3V0ZU1zZxIcCgR0eXBlGAEgASgOMg4u",
          "Um91dGVNc2cuVHlwZRILCgNtc2cYAiABKAwihgEKBFR5cGUSDAoIUkVHSVNU",
          "RVIQABIJCgVGUkFNRRABEhUKEVJFR0lTVEVSX1JFU1BPTlNFEAISEAoMQ0xJ",
          "RU5UX0ZSQU1FEAMSEAoMU0VSVkVSX0ZSQU1FEAQSGAoUQ0xJRU5UX1BPU0lU",
          "SU9OX1NZTkMQBRIQCgxQTEFZRVJfRU5URVIQBiIcCgtSZWdpc3Rlck1zZxIN",
          "CgV0aXRsZRgBIAEoCSKCAQoQUmVnaXN0ZXJSZXNwb25zZRIOCgZyZXN1bHQY",
          "ASABKAgSCgoCaWQYAiABKAUSDAoEcG9ydBgDIAEoBRITCgtzZXJ2ZXJGcmFt",
          "ZRgEIAEoDRIfCgpwbGF5ZXJMaXN0GAUgAygLMgsuUGxheWVySW5mbxIOCgZy",
          "ZWFzb24YBiABKAkiQAoLQ2xpZW50RnJhbWUSEAoIY2xpZW50SWQYASABKAUS",
          "HwoFaW5wdXQYAyABKAsyEC5DYW1lcmFBeGlzSW5wdXQiQgoLU2VydmVyRnJh",
          "bWUSDwoHZnJhbWVJZBgBIAEoDRIiCgxjbGllbnRJbnB1dHMYAiADKAsyDC5D",
          "bGllbnRGcmFtZSJHChJDbGllbnRQb3NpdGlvblN5bmMSEAoIY2xpZW50SWQY",
          "ASABKAUSHwoIcG9zaXRpb24YAiABKAsyDS5Qb3NpdGlvbkRhdGEibwoSU2Vy",
          "dmVyRnJhbWVQYWNrYWdlEh0KB2N1cnJlbnQYASABKAsyDC5TZXJ2ZXJGcmFt",
          "ZRIcCgZjYWNoZTEYAiABKAsyDC5TZXJ2ZXJGcmFtZRIcCgZjYWNoZTIYAyAB",
          "KAsyDC5TZXJ2ZXJGcmFtZSJaCg9DYW1lcmFBeGlzSW5wdXQSEQoJbW92ZVJp",
          "Z2h0GAEgASgCEhMKC21vdmVGb3J3YXJkGAIgASgCEhEKCWNhbWVyYVlhdxgD",
          "IAEoAhIMCgRqdW1wGAQgASgIIi8KDFBvc2l0aW9uRGF0YRIJCgF4GAEgASgC",
          "EgkKAXkYAiABKAISCQoBehgDIAEoAiInCgpQbGF5ZXJJbmZvEgoKAmlkGAEg",
          "ASgFEg0KBXRpdGxlGAIgASgJQgP4AQFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RouteMsg), global::RouteMsg.Parser, new[]{ "Type", "Msg" }, null, new[]{ typeof(global::RouteMsg.Types.Type) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterMsg), global::RegisterMsg.Parser, new[]{ "Title" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterResponse), global::RegisterResponse.Parser, new[]{ "Result", "Id", "Port", "ServerFrame", "PlayerList", "Reason" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientFrame), global::ClientFrame.Parser, new[]{ "ClientId", "Input" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerFrame), global::ServerFrame.Parser, new[]{ "FrameId", "ClientInputs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientPositionSync), global::ClientPositionSync.Parser, new[]{ "ClientId", "Position" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerFramePackage), global::ServerFramePackage.Parser, new[]{ "Current", "Cache1", "Cache2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CameraAxisInput), global::CameraAxisInput.Parser, new[]{ "MoveRight", "MoveForward", "CameraYaw", "Jump" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PositionData), global::PositionData.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "Id", "Title" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RouteMsg : pb::IMessage<RouteMsg> {
  private static readonly pb::MessageParser<RouteMsg> _parser = new pb::MessageParser<RouteMsg>(() => new RouteMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RouteMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RouteMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RouteMsg(RouteMsg other) : this() {
    type_ = other.type_;
    msg_ = other.msg_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RouteMsg Clone() {
    return new RouteMsg(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::RouteMsg.Types.Type type_ = global::RouteMsg.Types.Type.Register;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RouteMsg.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 2;
  private pb::ByteString msg_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RouteMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RouteMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Msg != other.Msg) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::RouteMsg.Types.Type.Register) hash ^= Type.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::RouteMsg.Types.Type.Register) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Msg);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != global::RouteMsg.Types.Type.Register) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RouteMsg other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::RouteMsg.Types.Type.Register) {
      Type = other.Type;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::RouteMsg.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          Msg = input.ReadBytes();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the RouteMsg message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("REGISTER")] Register = 0,
      [pbr::OriginalName("FRAME")] Frame = 1,
      [pbr::OriginalName("REGISTER_RESPONSE")] RegisterResponse = 2,
      [pbr::OriginalName("CLIENT_FRAME")] ClientFrame = 3,
      [pbr::OriginalName("SERVER_FRAME")] ServerFrame = 4,
      [pbr::OriginalName("CLIENT_POSITION_SYNC")] ClientPositionSync = 5,
      [pbr::OriginalName("PLAYER_ENTER")] PlayerEnter = 6,
    }

  }
  #endregion

}

public sealed partial class RegisterMsg : pb::IMessage<RegisterMsg> {
  private static readonly pb::MessageParser<RegisterMsg> _parser = new pb::MessageParser<RegisterMsg>(() => new RegisterMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterMsg(RegisterMsg other) : this() {
    title_ = other.title_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterMsg Clone() {
    return new RegisterMsg(this);
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 1;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Title != other.Title) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Title.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterMsg other) {
    if (other == null) {
      return;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Title = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse> {
  private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterResponse(RegisterResponse other) : this() {
    result_ = other.result_;
    id_ = other.id_;
    port_ = other.port_;
    serverFrame_ = other.serverFrame_;
    playerList_ = other.playerList_.Clone();
    reason_ = other.reason_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterResponse Clone() {
    return new RegisterResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private bool result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 3;
  private int port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Port {
    get { return port_; }
    set {
      port_ = value;
    }
  }

  /// <summary>Field number for the "serverFrame" field.</summary>
  public const int ServerFrameFieldNumber = 4;
  private uint serverFrame_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ServerFrame {
    get { return serverFrame_; }
    set {
      serverFrame_ = value;
    }
  }

  /// <summary>Field number for the "playerList" field.</summary>
  public const int PlayerListFieldNumber = 5;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_playerList_codec
      = pb::FieldCodec.ForMessage(42, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> playerList_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> PlayerList {
    get { return playerList_; }
  }

  /// <summary>Field number for the "reason" field.</summary>
  public const int ReasonFieldNumber = 6;
  private string reason_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Reason {
    get { return reason_; }
    set {
      reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Id != other.Id) return false;
    if (Port != other.Port) return false;
    if (ServerFrame != other.ServerFrame) return false;
    if(!playerList_.Equals(other.playerList_)) return false;
    if (Reason != other.Reason) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != false) hash ^= Result.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Port != 0) hash ^= Port.GetHashCode();
    if (ServerFrame != 0) hash ^= ServerFrame.GetHashCode();
    hash ^= playerList_.GetHashCode();
    if (Reason.Length != 0) hash ^= Reason.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != false) {
      output.WriteRawTag(8);
      output.WriteBool(Result);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (Port != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Port);
    }
    if (ServerFrame != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(ServerFrame);
    }
    playerList_.WriteTo(output, _repeated_playerList_codec);
    if (Reason.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Reason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != false) {
      size += 1 + 1;
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Port != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
    }
    if (ServerFrame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerFrame);
    }
    size += playerList_.CalculateSize(_repeated_playerList_codec);
    if (Reason.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != false) {
      Result = other.Result;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Port != 0) {
      Port = other.Port;
    }
    if (other.ServerFrame != 0) {
      ServerFrame = other.ServerFrame;
    }
    playerList_.Add(other.playerList_);
    if (other.Reason.Length != 0) {
      Reason = other.Reason;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadBool();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 24: {
          Port = input.ReadInt32();
          break;
        }
        case 32: {
          ServerFrame = input.ReadUInt32();
          break;
        }
        case 42: {
          playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
          break;
        }
        case 50: {
          Reason = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ClientFrame : pb::IMessage<ClientFrame> {
  private static readonly pb::MessageParser<ClientFrame> _parser = new pb::MessageParser<ClientFrame>(() => new ClientFrame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientFrame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientFrame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientFrame(ClientFrame other) : this() {
    clientId_ = other.clientId_;
    input_ = other.input_ != null ? other.input_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientFrame Clone() {
    return new ClientFrame(this);
  }

  /// <summary>Field number for the "clientId" field.</summary>
  public const int ClientIdFieldNumber = 1;
  private int clientId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientId {
    get { return clientId_; }
    set {
      clientId_ = value;
    }
  }

  /// <summary>Field number for the "input" field.</summary>
  public const int InputFieldNumber = 3;
  private global::CameraAxisInput input_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CameraAxisInput Input {
    get { return input_; }
    set {
      input_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientFrame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientFrame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientId != other.ClientId) return false;
    if (!object.Equals(Input, other.Input)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientId != 0) hash ^= ClientId.GetHashCode();
    if (input_ != null) hash ^= Input.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientId);
    }
    if (input_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Input);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
    }
    if (input_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientFrame other) {
    if (other == null) {
      return;
    }
    if (other.ClientId != 0) {
      ClientId = other.ClientId;
    }
    if (other.input_ != null) {
      if (input_ == null) {
        Input = new global::CameraAxisInput();
      }
      Input.MergeFrom(other.Input);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientId = input.ReadInt32();
          break;
        }
        case 26: {
          if (input_ == null) {
            Input = new global::CameraAxisInput();
          }
          input.ReadMessage(Input);
          break;
        }
      }
    }
  }

}

public sealed partial class ServerFrame : pb::IMessage<ServerFrame> {
  private static readonly pb::MessageParser<ServerFrame> _parser = new pb::MessageParser<ServerFrame>(() => new ServerFrame());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerFrame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerFrame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerFrame(ServerFrame other) : this() {
    frameId_ = other.frameId_;
    clientInputs_ = other.clientInputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerFrame Clone() {
    return new ServerFrame(this);
  }

  /// <summary>Field number for the "frameId" field.</summary>
  public const int FrameIdFieldNumber = 1;
  private uint frameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FrameId {
    get { return frameId_; }
    set {
      frameId_ = value;
    }
  }

  /// <summary>Field number for the "clientInputs" field.</summary>
  public const int ClientInputsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ClientFrame> _repeated_clientInputs_codec
      = pb::FieldCodec.ForMessage(18, global::ClientFrame.Parser);
  private readonly pbc::RepeatedField<global::ClientFrame> clientInputs_ = new pbc::RepeatedField<global::ClientFrame>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ClientFrame> ClientInputs {
    get { return clientInputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerFrame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerFrame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FrameId != other.FrameId) return false;
    if(!clientInputs_.Equals(other.clientInputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FrameId != 0) hash ^= FrameId.GetHashCode();
    hash ^= clientInputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FrameId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(FrameId);
    }
    clientInputs_.WriteTo(output, _repeated_clientInputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FrameId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
    }
    size += clientInputs_.CalculateSize(_repeated_clientInputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerFrame other) {
    if (other == null) {
      return;
    }
    if (other.FrameId != 0) {
      FrameId = other.FrameId;
    }
    clientInputs_.Add(other.clientInputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FrameId = input.ReadUInt32();
          break;
        }
        case 18: {
          clientInputs_.AddEntriesFrom(input, _repeated_clientInputs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ClientPositionSync : pb::IMessage<ClientPositionSync> {
  private static readonly pb::MessageParser<ClientPositionSync> _parser = new pb::MessageParser<ClientPositionSync>(() => new ClientPositionSync());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientPositionSync> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientPositionSync() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientPositionSync(ClientPositionSync other) : this() {
    clientId_ = other.clientId_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientPositionSync Clone() {
    return new ClientPositionSync(this);
  }

  /// <summary>Field number for the "clientId" field.</summary>
  public const int ClientIdFieldNumber = 1;
  private int clientId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClientId {
    get { return clientId_; }
    set {
      clientId_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private global::PositionData position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PositionData Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientPositionSync);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientPositionSync other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientId != other.ClientId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientId != 0) hash ^= ClientId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClientId);
    }
    if (position_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Position);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClientId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientPositionSync other) {
    if (other == null) {
      return;
    }
    if (other.ClientId != 0) {
      ClientId = other.ClientId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::PositionData();
      }
      Position.MergeFrom(other.Position);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientId = input.ReadInt32();
          break;
        }
        case 18: {
          if (position_ == null) {
            Position = new global::PositionData();
          }
          input.ReadMessage(Position);
          break;
        }
      }
    }
  }

}

public sealed partial class ServerFramePackage : pb::IMessage<ServerFramePackage> {
  private static readonly pb::MessageParser<ServerFramePackage> _parser = new pb::MessageParser<ServerFramePackage>(() => new ServerFramePackage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerFramePackage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerFramePackage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerFramePackage(ServerFramePackage other) : this() {
    current_ = other.current_ != null ? other.current_.Clone() : null;
    cache1_ = other.cache1_ != null ? other.cache1_.Clone() : null;
    cache2_ = other.cache2_ != null ? other.cache2_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerFramePackage Clone() {
    return new ServerFramePackage(this);
  }

  /// <summary>Field number for the "current" field.</summary>
  public const int CurrentFieldNumber = 1;
  private global::ServerFrame current_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerFrame Current {
    get { return current_; }
    set {
      current_ = value;
    }
  }

  /// <summary>Field number for the "cache1" field.</summary>
  public const int Cache1FieldNumber = 2;
  private global::ServerFrame cache1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerFrame Cache1 {
    get { return cache1_; }
    set {
      cache1_ = value;
    }
  }

  /// <summary>Field number for the "cache2" field.</summary>
  public const int Cache2FieldNumber = 3;
  private global::ServerFrame cache2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerFrame Cache2 {
    get { return cache2_; }
    set {
      cache2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerFramePackage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerFramePackage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Current, other.Current)) return false;
    if (!object.Equals(Cache1, other.Cache1)) return false;
    if (!object.Equals(Cache2, other.Cache2)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (current_ != null) hash ^= Current.GetHashCode();
    if (cache1_ != null) hash ^= Cache1.GetHashCode();
    if (cache2_ != null) hash ^= Cache2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (current_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Current);
    }
    if (cache1_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Cache1);
    }
    if (cache2_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Cache2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (current_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Current);
    }
    if (cache1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cache1);
    }
    if (cache2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cache2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerFramePackage other) {
    if (other == null) {
      return;
    }
    if (other.current_ != null) {
      if (current_ == null) {
        Current = new global::ServerFrame();
      }
      Current.MergeFrom(other.Current);
    }
    if (other.cache1_ != null) {
      if (cache1_ == null) {
        Cache1 = new global::ServerFrame();
      }
      Cache1.MergeFrom(other.Cache1);
    }
    if (other.cache2_ != null) {
      if (cache2_ == null) {
        Cache2 = new global::ServerFrame();
      }
      Cache2.MergeFrom(other.Cache2);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (current_ == null) {
            Current = new global::ServerFrame();
          }
          input.ReadMessage(Current);
          break;
        }
        case 18: {
          if (cache1_ == null) {
            Cache1 = new global::ServerFrame();
          }
          input.ReadMessage(Cache1);
          break;
        }
        case 26: {
          if (cache2_ == null) {
            Cache2 = new global::ServerFrame();
          }
          input.ReadMessage(Cache2);
          break;
        }
      }
    }
  }

}

public sealed partial class CameraAxisInput : pb::IMessage<CameraAxisInput> {
  private static readonly pb::MessageParser<CameraAxisInput> _parser = new pb::MessageParser<CameraAxisInput>(() => new CameraAxisInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CameraAxisInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraAxisInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraAxisInput(CameraAxisInput other) : this() {
    moveRight_ = other.moveRight_;
    moveForward_ = other.moveForward_;
    cameraYaw_ = other.cameraYaw_;
    jump_ = other.jump_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraAxisInput Clone() {
    return new CameraAxisInput(this);
  }

  /// <summary>Field number for the "moveRight" field.</summary>
  public const int MoveRightFieldNumber = 1;
  private float moveRight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float MoveRight {
    get { return moveRight_; }
    set {
      moveRight_ = value;
    }
  }

  /// <summary>Field number for the "moveForward" field.</summary>
  public const int MoveForwardFieldNumber = 2;
  private float moveForward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float MoveForward {
    get { return moveForward_; }
    set {
      moveForward_ = value;
    }
  }

  /// <summary>Field number for the "cameraYaw" field.</summary>
  public const int CameraYawFieldNumber = 3;
  private float cameraYaw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CameraYaw {
    get { return cameraYaw_; }
    set {
      cameraYaw_ = value;
    }
  }

  /// <summary>Field number for the "jump" field.</summary>
  public const int JumpFieldNumber = 4;
  private bool jump_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Jump {
    get { return jump_; }
    set {
      jump_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CameraAxisInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CameraAxisInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveRight, other.MoveRight)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveForward, other.MoveForward)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CameraYaw, other.CameraYaw)) return false;
    if (Jump != other.Jump) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MoveRight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveRight);
    if (MoveForward != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveForward);
    if (CameraYaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CameraYaw);
    if (Jump != false) hash ^= Jump.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MoveRight != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(MoveRight);
    }
    if (MoveForward != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(MoveForward);
    }
    if (CameraYaw != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(CameraYaw);
    }
    if (Jump != false) {
      output.WriteRawTag(32);
      output.WriteBool(Jump);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MoveRight != 0F) {
      size += 1 + 4;
    }
    if (MoveForward != 0F) {
      size += 1 + 4;
    }
    if (CameraYaw != 0F) {
      size += 1 + 4;
    }
    if (Jump != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CameraAxisInput other) {
    if (other == null) {
      return;
    }
    if (other.MoveRight != 0F) {
      MoveRight = other.MoveRight;
    }
    if (other.MoveForward != 0F) {
      MoveForward = other.MoveForward;
    }
    if (other.CameraYaw != 0F) {
      CameraYaw = other.CameraYaw;
    }
    if (other.Jump != false) {
      Jump = other.Jump;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          MoveRight = input.ReadFloat();
          break;
        }
        case 21: {
          MoveForward = input.ReadFloat();
          break;
        }
        case 29: {
          CameraYaw = input.ReadFloat();
          break;
        }
        case 32: {
          Jump = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class PositionData : pb::IMessage<PositionData> {
  private static readonly pb::MessageParser<PositionData> _parser = new pb::MessageParser<PositionData>(() => new PositionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PositionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionData(PositionData other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionData Clone() {
    return new PositionData(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PositionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PositionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PositionData other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommandReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    id_ = other.id_;
    title_ = other.title_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Title != other.Title) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Title = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
